version: '3.8'

services:
  mongodb:
    image: mongo:latest
    container_name: mongodb-prod
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-MiContraseñaSegura123}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-present}
      ENVIRONMENT: production
    volumes:
      - mongodb_prod_data:/data/db
      - ./mongodb_backup:/mongodb_backup
      - ./config/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    networks:
      - app_network_prod
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "mongodb-prod"

  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile.prod
      args:
        - BUILD_ENV=prod
    image: present/backend:production
    container_name: backend-prod
    restart: always
    expose:
      - "5000"
    env_file:
      - ./apps/backend/.env.prod
    environment:
      - NODE_ENV=production
      - ENVIRONMENT=production
      - MONGODB_URI=mongodb://${MONGO_USER:-admin}:${MONGO_PASSWORD:-MiContraseñaSegura123}@mongodb-prod:27017/${MONGO_DB:-present}?authSource=admin
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - app_network_prod
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "backend-prod"

  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile.prod
      args:
        - BUILD_ENV=prod
    image: present/frontend:production
    container_name: frontend-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - ./apps/frontend/.env.prod
    environment:
      - NODE_ENV=production
      - ENVIRONMENT=production
    volumes:
      - ./config/nginx/conf.d/production.conf:/etc/nginx/conf.d/default.conf
      - ./config/ssl/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - app_network_prod
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "frontend-prod"

  webhook:
    build:
      context: ./apps/webhook
      dockerfile: Dockerfile.prod
      args:
        - BUILD_ENV=prod
    image: present/webhook:production
    container_name: webhook-prod
    restart: always
    expose:
      - "9000"
    environment:
      - NODE_ENV=production
      - ENVIRONMENT=production
      - PORT=9000
      - WEBHOOK_SECRET=ProductionSecret_ATTADIA99
      - LOG_FILE=/var/log/webhook-server/webhook-production.log
    volumes:
      - /var/log/webhook-server:/var/log/webhook-server
      - .:/home/poloatt/present
      - /var/run/docker.sock:/var/run/docker.sock
      - webhook_backups:/data/backups
    networks:
      - app_network_prod
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "webhook-prod"

volumes:
  mongodb_prod_data:
    name: present_mongodb_prod_data
  webhook_backups:
    name: present_webhook_backups

networks:
  app_network_prod:
    name: present_app_network_prod
