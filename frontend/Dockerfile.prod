# Build stage
FROM node:18-alpine as build

WORKDIR /app

# Instalar dependencias necesarias
RUN apk add --no-cache wget curl git

# Configurar npm
RUN npm config set registry https://registry.npmjs.org/ && \
    npm config set strict-ssl false

# Copiar package.json y package-lock.json
COPY package*.json ./

# Limpiar cache e instalar dependencias
RUN npm cache clean --force && \
    rm -rf node_modules

# Instalar dependencias específicas primero
RUN npm install @mui/x-date-pickers@5.0.20 \
    date-fns@2.30.0 \
    @mui/material@5.15.11 \
    @emotion/react@11.11.3 \
    @emotion/styled@11.11.0 \
    @mui/icons-material@5.15.11

# Instalar el resto de dependencias
RUN npm install --legacy-peer-deps

# Copiar el resto de la aplicación
COPY . .

# Construir la aplicación para staging
ARG BUILD_ENV=staging
ENV NODE_ENV=production
ENV VITE_MODE=staging
RUN npm run build -- --mode ${BUILD_ENV}

# Production stage
FROM nginx:alpine

# Crear directorio para la configuración de nginx
RUN mkdir -p /etc/nginx/conf.d

# Copiar los archivos estáticos
COPY --from=build /app/dist /usr/share/nginx/html
COPY --from=build /app/public /usr/share/nginx/html

# Exponer el puerto 80
EXPOSE 80

# Iniciar nginx
CMD ["nginx", "-g", "daemon off;"] 