generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String?
  name      String?
  googleId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")

  // Relaciones
  transacciones  Transaccion[]
  inventarios    Inventario[]
  rutinas        Rutina[]
  labResults     LabResult[]
  proyectos      Proyecto[]
  propiedades    Propiedad[]
}

model Propiedad {
  id              String   @id @default(uuid())
  titulo          String
  descripcion     String
  precio          Float
  direccion       String
  ciudad          String
  estado          String
  tipo            String
  numHabitaciones Int
  banos           Int
  metrosCuadrados Float
  imagen          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  usuario         User     @relation(fields: [usuarioId], references: [id])
  usuarioId       String
  cuentas         String[]

  transacciones   Transaccion[]
  habitaciones    Habitacion[]
  inventarios     Inventario[]

  @@map("propiedades")
}

model Transaccion {
  id          String    @id @default(uuid())
  fecha       DateTime
  monto       Float
  moneda      Moneda
  descripcion String
  cuenta      String
  estado      Estado
  recurrencia Boolean   @default(false)
  tipo        String
  categoria   String
  locacion    String
  usuario     User      @relation(fields: [usuarioId], references: [id])
  usuarioId   String
  propiedad   Propiedad? @relation(fields: [propiedadId], references: [id])
  propiedadId String?

  @@map("transacciones")
}

model Habitacion {
  id          String    @id @default(uuid())
  nombre      String
  descripcion String?
  propiedad   Propiedad @relation(fields: [propiedadId], references: [id])
  propiedadId String

  @@map("habitaciones")
}

model Inventario {
  id          String     @id @default(uuid())
  locacion    String
  sublocacion String?
  categoria   String
  item        String
  cantidad    Int
  consumible  Boolean    @default(false)
  propiedad   Propiedad? @relation(fields: [propiedadId], references: [id])
  propiedadId String?
  usuario     User       @relation(fields: [usuarioId], references: [id])
  usuarioId   String

  @@map("inventarios")
}

model Rutina {
  id           String   @id @default(uuid())
  fecha        DateTime
  wakeup       Boolean  @default(false)
  meds         Boolean  @default(false)
  skincareDay  Boolean  @default(false)
  makeBed      Boolean  @default(false)
  usuario      User     @relation(fields: [usuarioId], references: [id])
  usuarioId    String

  @@map("rutinas")
}

model LabResult {
  id        String   @id @default(uuid())
  fecha     DateTime
  tipo      String
  resultado String
  usuario   User     @relation(fields: [usuarioId], references: [id])
  usuarioId String

  @@map("lab_results")
}

model Proyecto {
  id          String   @id @default(uuid())
  nombre      String
  descripcion String?
  estado      String
  fechaInicio DateTime
  fechaFin    DateTime?
  usuario     User     @relation(fields: [usuarioId], references: [id])
  usuarioId   String
  tareas      Tarea[]

  @@map("proyectos")
}

model Tarea {
  id          String     @id @default(uuid())
  titulo      String
  descripcion String?
  estado      String
  proyecto    Proyecto   @relation(fields: [proyectoId], references: [id])
  proyectoId  String
  subtareas   Subtarea[]

  @@map("tareas")
}

model Subtarea {
  id          String  @id @default(uuid())
  titulo      String
  completada  Boolean @default(false)
  tarea       Tarea   @relation(fields: [tareaId], references: [id])
  tareaId     String

  @@map("subtareas")
}

enum Estado {
  PENDIENTE
  COMPLETADO
  EN_PROCESO
  CANCELADO
}

enum Moneda {
  MXN
  USD
  EUR
} 