version: '3.8'

services:
  mongodb:
    container_name: mongodb-staging
    image: mongo:latest
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data_staging:/data/db
    networks:
      - app_network_staging
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}

  backend:
    container_name: backend-staging
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    image: present/backend:staging
    restart: always
    depends_on:
      - mongodb
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - app_network_staging
    environment:
      - NODE_ENV=staging
      - MONGO_URI=mongodb://mongodb:27017/present
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - PORT=5000
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_CALLBACK_URL=${GOOGLE_CALLBACK_URL}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    command: npm run dev

  frontend:
    container_name: frontend-staging
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_URL=${VITE_API_URL}
        - VITE_NODE_ENV=staging
    image: present/frontend:staging
    restart: always
    depends_on:
      - backend
    ports:
      - "8080:80"
      - "8443:443"
    networks:
      - app_network_staging
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  webhook:
    container_name: webhook-staging
    build:
      context: ./webhook
      dockerfile: Dockerfile
    image: present/webhook:staging
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/app/repo
    ports:
      - "9000:9000"
    networks:
      - app_network_staging
    environment:
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - REPO_PATH=/app/repo
      - BRANCH=staging
      - COMPOSE_FILE=docker-compose.staging.yml
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

networks:
  app_network_staging:
    driver: bridge

volumes:
  mongo_data_staging:
