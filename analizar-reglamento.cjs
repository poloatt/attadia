const fs = require('fs');
const path = require('path');
const pdf = require('pdf-parse');

async function analizarReglamento() {
    try {
        // Ruta al archivo PDF
        const pdfPath = path.join(process.env.USERPROFILE, 'Downloads', 'reglamentodecopropiedad.pdf');
        
        // Verificar si el archivo existe
        if (!fs.existsSync(pdfPath)) {
            console.log('‚ùå No se encontr√≥ el archivo PDF en:', pdfPath);
            console.log('Por favor, aseg√∫rate de que el archivo est√© en tu carpeta de Descargas');
            return;
        }

        console.log('üìÑ Extrayendo texto del PDF...');
        
        // Leer y extraer texto del PDF
        const dataBuffer = fs.readFileSync(pdfPath);
        const data = await pdf(dataBuffer);
        
        console.log(`‚úÖ Texto extra√≠do. Total de p√°ginas: ${data.numpages}`);
        console.log(`üìù Caracteres extra√≠dos: ${data.text.length}`);
        
        // Crear archivo de texto con el contenido extra√≠do
        const textFilePath = 'reglamento_extraido.txt';
        fs.writeFileSync(textFilePath, data.text);
        console.log(`üíæ Texto guardado en: ${textFilePath}`);
        
        // Buscar menciones espec√≠ficas
        console.log('\nüîç === AN√ÅLISIS DEL REGLAMENTO ===\n');
        
        // T√©rminos de b√∫squeda
        const terminosCorregimiento = [
            'corregimiento',
            'corregimiento de',
            'corregidor',
            'corregidores'
        ];
        
        const terminosAdministracion = [
            'administraci√≥n',
            'administrador',
            'administradora',
            'sindico',
            's√≠ndico',
            's√≠ndica',
            'personer√≠a',
            'personero',
            'personera',
            'gesti√≥n',
            'gestor'
        ];
        
        const terminosConsorcio = [
            'consorcio',
            'consorcios',
            'copropietarios',
            'agrupaci√≥n',
            'agrupaciones',
            'consejo',
            'asamblea',
            'propietarios'
        ];

        // Funci√≥n para buscar t√©rminos y mostrar contexto
        function buscarTerminos(terminos, categoria) {
            console.log(`\nüìã === ${categoria.toUpperCase()} ===`);
            const texto = data.text.toLowerCase();
            
            terminos.forEach(termino => {
                const regex = new RegExp(`.{0,50}\\b${termino.toLowerCase()}\\b.{0,50}`, 'gi');
                const matches = data.text.match(regex);
                
                if (matches && matches.length > 0) {
                    console.log(`\nüî∏ Palabra clave: "${termino}"`);
                    console.log(`üìä Aparece ${matches.length} vez(es)`);
                    console.log(`üìñ Contextos encontrados:`);
                    
                    matches.slice(0, 5).forEach((match, index) => {
                        console.log(`   ${index + 1}. ${match.trim()}`);
                    });
                    
                    if (matches.length > 5) {
                        console.log(`   ... y ${matches.length - 5} menciones m√°s`);
                    }
                } else {
                    console.log(`‚ùå "${termino}" - No se encontraron menciones`);
                }
            });
        }
        
        // Buscar cada categor√≠a
        buscarTerminos(terminosCorregimiento, 'Referencias a Corregimiento/Corregidores');
        buscarTerminos(terminosAdministracion, 'Referencias a Administraci√≥n');
        buscarTerminos(terminosConsorcio, 'Referencias a Consorcios/Copropietarios');
        
        // An√°lisis adicional
        console.log('\nüìà === ESTAD√çSTICAS GENERALES ===');
        console.log(`üìÑ Total de p√°ginas: ${data.numpages}`);
        console.log(`üìù Total de caracteres: ${data.text.length.toLocaleString()}`);
        console.log(`üìä Total de palabras: ${data.text.split(/\s+/).length.toLocaleString()}`);
        
        // Buscar secciones comunes en reglamentos
        console.log('\nüìö === ESTRUCTURA DEL DOCUMENTO ===');
        const seccionesComunes = [
            'C√ÅPITULO',
            'ART√çCULO',
            'T√çTULO',
            'SECCI√ìN',
            'CONSIDERANDOS',
            'CLAUSULA',
            'CL√ÅUSULA'
        ];
        
        seccionesComunes.forEach(titulo => {
            const regex = new RegExp(`\\b${titulo}\\s+\\d+`, 'gi');
            const matches = data.text.match(regex);
            if (matches) {
                console.log(`üìÑ ${titulo}: ${matches.length} encontrados`);
                console.log(`   Ejemplos: ${matches.slice(0, 3).join(', ')}`);
            }
        });
        
        console.log('\n‚úÖ An√°lisis completado!');
        console.log(`üìÅ Puedes revisar el texto completo en el archivo: ${textFilePath}`);
        
    } catch (error) {
        console.error('‚ùå Error al procesar el PDF:', error.message);
        
        if (error.message.includes('Invalid PDF')) {
            console.log('üí° Posibles soluciones:');
            console.log('   - Verifica que el archivo PDF no est√© corrupto');
            console.log('   - Aseg√∫rate de que el PDF contenga texto seleccionable');
            console.log('   - Intenta convertir el PDF a una versi√≥n m√°s nueva');
        }
    }
}

// Ejecutar el an√°lisis
analizarReglamento();
